{% extends 'base.html.twig' %}

{% block title %}Les ressources{% endblock %}

{% block body %}
    <div class="ressources page-with-background" id="ressources">
        <div class="container-fluid mt-5 pt-3">
            <div class="row">
                <div class="col-md-7">
                    <div class="page-title">
                        <h1>Les ressources</h1>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid my-5">
            <div class="row">
                {% include './listUtils/search.html.twig' %}
            </div>
            <div class="row align-items-end">
                {% include './listUtils/authorFilter.html.twig' %}
                {% include './listUtils/typeFilter.html.twig' %}
                {% include './listUtils/themeFilter.html.twig' %}
                {% include './listUtils/reset.html.twig' %}
            </div>
        </div>
        <div class="container-fluid">
            <div class="row list">
                {% for ressource in ressources %}
                    <div class="col-md-4 mb-5">
                        {% include './ressources/ressourceCard.html.twig' with {'ressource': ressource} %}
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
{% endblock %}

{% block bottom_scripts %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/multiple-select-js/dist/css/multiple-select.css">
    <script src="https://cdn.jsdelivr.net/npm/multiple-select-js/dist/js/multiple-select.js"></script>
    <script>
        const options = {
            valueNames: ['author', 'title', 'type',  { name: 'theme', attr: 'data-theme' }],
        };

        const list = new List('ressources', options);
        const activeFilters = [];

        const filterList = () => {
            list.filter(function (item) {
                if (activeFilters.length > 0) {
                    let shown = true;
                    let voteTypes = [];
                    let votesFor = [];
                    activeFilters.forEach(function(filter) {
                        if (!voteTypes.includes(filter.type)) {
                            voteTypes.push(filter.type)
                        }

                        if (item.values()[filter.type].includes(filter.value)) {
                            votesFor.push(filter.type)
                        }
                    });

                    return voteTypes.length === votesFor.length;
                }
                return true;
            });
            list.update();
        }
    </script>
    {% include './listUtils/authorScripts.html.twig' %}
    {% include './listUtils/typeScripts.html.twig' %}
    {% include './listUtils/themeScripts.html.twig' %}
    <script>
        if (localStorage.getItem('themeFilters')) {
            const themeFilters = localStorage.getItem('themeFilters').split(',');
        }

        mediaFilters = [];
        if (localStorage.getItem('mediaFilters')) {
            mediaFilters = localStorage.getItem('mediaFilters').split(',');
        }

        mediaFilters.forEach((mediaFilter) => {
            [...typeSelector.options].forEach((option) => {
                if (mediaFilter === option.value.replace(/\s/g, "")) {
                    if (option.selected !== true) {
                        option.setAttribute('selected', 'selected');
                        filterType(option.value);
                        filterList();
                    }
                }
            })
        });

        new MultipleSelect('#select-multiple-format', {
            placeholder: 'Filtre par format',
        })
        new MultipleSelect('#select-multiple-author', {
            placeholder: 'Filtre par auteur',
        })
        new MultipleSelect('#select-multiple-theme', {
            placeholder: 'Filtre par thème',
        })

        const selectPlaceholders = document.querySelectorAll('.select input[type="text"]');
        [...selectPlaceholders].forEach((selectPlaceholder) => {
            selectPlaceholder.placeholder = 'Rechercher'
        })
        const selectSelectedInfos = document.querySelectorAll('span.content');
        [...selectSelectedInfos].forEach((selectSelectedInfo) => {
            if (selectSelectedInfo.innerText.includes('selected')) {
                selectSelectedInfo.innerText = selectSelectedInfo.innerText.replace('selected', 'selectionné(s)')
            }
        })
        const targetNodes = document.getElementsByClassName('select');
        const config = { attributes: true, childList: true, subtree: true };
        const callback = function(mutationsList, observer) {
            for(const mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    mutation.addedNodes.forEach((addedNode) => {
                        if (addedNode.innerText === 'No items.') {
                            addedNode.textContent = 'Pas de résultats.'
                        }
                        if (addedNode.data.includes('selected')) {
                            addedNode.data = addedNode.data.replace('selected', 'selectionné(s)')
                        }
                    })
                }
            }
        };
        [...targetNodes].forEach((targetNode) => {
            const observer = new MutationObserver(callback);
            observer.observe(targetNode, config);
        });
    </script>
{% endblock %}