{% extends 'base.html.twig' %}

{% block title %}Les organismes{% endblock %}

{% block body %}
    <div class="organisms page-with-background" id="organisms">
        <div class="container-fluid mt-3 mt-md-5 pt-3">
            <div class="row">
                <div class="col-md-7">
                    <div class="page-title">
                        <h1>Les organismes</h1>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid my-3 my-md-5 filters-bar">
            <div class="row">
                {% include './listUtils/search.html.twig' %}
            </div>
        </div>
        <div class="container-fluid">
            <div class="row list">
                {% for organism in organisms %}
                    <div class="col-md-4 mb-4">
                        {% include './organisms/organismsCard.html.twig' with {'organism': organism} %}
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
{% endblock %}

{% block bottom_scripts %}
    <script>
        const options = {
            valueNames: [ 'name' ],
        };

        const list = new List('organisms', options);
        const activeFilters = [];

        const filterList = () => {
            list.filter(function (item) {
                if (activeFilters.length > 0) {
                    let shown = true;
                    let mandatoryShown = false;
                    let hasAtLeastOneTrueShown = false;
                    activeFilters.forEach(function (filter) {
                        if (item.values()[filter.type] !== filter.value) {
                            shown = false;
                        }
                        if (filter.type === 'type' && item.values()[filter.type] === filter.value) {
                            mandatoryShown = true
                        }
                        if (filter.type !== 'type' && item.values()[filter.type] === filter.value) {
                            hasAtLeastOneTrueShown = true;
                        }
                        if (filter.type === 'author' && filter.value === 'default') {
                            shown = true;
                            hasAtLeastOneTrueShown = true;
                        }
                    });

                    if (mandatoryShown && (activeFilters.filter(filter => filter.type !== 'type').length === 0 || hasAtLeastOneTrueShown)) {
                        return true;
                    }

                    return shown;
                }
                return true;
            });
            list.update();
        }
    </script>
    <script>
        const onStickyChangeBackground = (event) => {
            if (event[0].isIntersecting) {
                document.querySelector('.filters-bar').classList.remove('filters-bar-filled')
            } else {
                document.querySelector('.filters-bar').classList.add('filters-bar-filled')
            }
        }
        const observer = new IntersectionObserver(onStickyChangeBackground, {
            rootMargin: '-1px 0px 0px 0px',
            threshold: [1],
        });

        observer.observe(document.querySelector('.filters-bar'));
    </script>
{% endblock %}
